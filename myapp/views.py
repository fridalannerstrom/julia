import os
import io
import fitz  # PyMuPDF f√∂r textextraktion
import requests
from django.shortcuts import render
from openai import OpenAI
from dotenv import load_dotenv

# Ladda .env
load_dotenv()
if os.path.exists("env.py"):
    import env

# Initiera OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# üß© 1. Ladda upp PDF till PDF.co
def upload_pdf_to_pdfco(pdf_file):
    url = "https://api.pdf.co/v1/file/upload"
    headers = {"x-api-key": os.getenv("PDFCO_API_KEY")}
    files = {"file": pdf_file}

    response = requests.post(url, headers=headers, files=files)
    result = response.json()

    if not result.get("error"):
        return result.get("url")  # URL till uppladdad fil
    else:
        print("Upload Error:", result.get("message"))
        return None

# üß© 2. Konvertera PDF-URL till PNG-bilder
def convert_pdf_url_to_images(url):
    api_url = "https://api.pdf.co/v1/pdf/convert/to/png"
    headers = {"x-api-key": os.getenv("PDFCO_API_KEY")}
    payload = {
        "url": url,
        "pages": "2-7",  # ‚úÖ Bara sidor 3‚Äì8 (hoppar 1‚Äì2)
        "async": False
    }

    response = requests.post(api_url, headers=headers, json=payload)
    result = response.json()

    if not result.get("error"):
        return result.get("urls")  # Lista med bild-URL:er
    else:
        print("Conversion Error:", result.get("message"))
        return []

# üîç GPT-analys av text
def analyze_traits(text):
    prompt = f"""
Du √§r en expert p√• testtolkning f√∂r rekrytering. L√§s f√∂ljande text fr√•n en kandidats testresultat och bed√∂m endast tv√• karakt√§rsdrag:

1. Struktur & disciplin  
2. Anpassningsf√∂rm√•ga

F√∂r varje karakt√§rsdrag, ange:
- Ett betyg (v√§lj EN av f√∂ljande):  
    - 1: God f√∂rm√•ga  
    - 2: Tillr√§ckligt god f√∂rm√•ga  
    - 3: Utrymme f√∂r f√∂rb√§ttring  
- En kort motivering baserad p√• vad du l√§ser i texten.

H√§r √§r testtexten:
{text}

Returnera svaret strukturerat, t.ex.:
---
Struktur & disciplin: Tillr√§ckligt god f√∂rm√•ga  
Motivering: ‚Ä¶

Anpassningsf√∂rm√•ga: God f√∂rm√•ga  
Motivering: ‚Ä¶
"""

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.4,
        max_tokens=500,
    )

    return response.choices[0].message.content.strip()

def analyze_scales_from_images(image_urls):
    prompt = """
Du ser en eller flera bilder fr√•n ett personlighetstest.

Varje karakt√§rsdrag har en visuell skala med 10 rutor i rad fr√•n v√§nster till h√∂ger:
- Varje f√§rgad (lila) ruta r√§knas som 1 po√§ng
- 10 rutor = maxpo√§ng (10), 1 ruta = l√§gsta po√§ng (1)
- R√§kna de f√§rgade rutorna och avg√∂r individens po√§ng

Du ska:
1. Identifiera namnet p√• varje skala (st√•r direkt ovanf√∂r eller bredvid raderna med rutor)
2. R√§kna exakt hur m√•nga rutor √§r f√§rgade
3. Presentera svaret i **en tabell med tv√• kolumner**: "Skala" och "Po√§ng"

Obs: Ignorera all text till v√§nster och h√∂ger ‚Äì titta endast p√• skalanamnet och antalet f√§rgade rutor i rad.

Exempel:
| Skala          | Po√§ng |
|----------------|-------|
| Empati         | 7     |
| Struktur       | 5     |
"""

    # L√§gg till alla bilder som image inputs
    images = [{"type": "image_url", "image_url": {"url": img}} for img in image_urls]

    # Kombinera prompt + bilder
    content = [{"type": "text", "text": prompt}] + images

    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": content}],
        max_tokens=1000,
    )

    return response.choices[0].message.content.strip()

# üåê Huvudvy
def index(request):
    result = None
    analysis = None
    pdf_image_urls = []

    if request.method == 'POST' and request.FILES.get('pdf'):
        pdf_file = request.FILES['pdf']
        pdf_bytes = pdf_file.read()

        # ‚ûï Extrahera text (hoppa f√∂rsta 2 sidor)
        with fitz.open(stream=pdf_bytes, filetype="pdf") as doc:
            result = ""
            for page_number in range(2, len(doc)):
                result += doc[page_number].get_text()

        # ‚ûï GPT-analys
        analysis = analyze_traits(result)

        # ‚ûï PDF.co: ladda upp + konvertera
        pdf_file.seek(0)  # reset efter read()
        uploaded_url = upload_pdf_to_pdfco(pdf_file)
        if uploaded_url:
            pdf_image_urls = convert_pdf_url_to_images(uploaded_url)

    vision_result = None
    if pdf_image_urls:
        vision_result = analyze_scales_from_images(pdf_image_urls)

    return render(request, 'index.html', {
        'result': result,
        'analysis': analysis,
        'pdf_images': pdf_image_urls,
        'vision_table': vision_result,
    })

